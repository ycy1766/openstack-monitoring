#!/bin/sh

HEADER="Accept: application/json "
GET_URL="http://localhost:4999/api/v0.1"
JQ="{{ JQ }}"


if [ $# = 0 ]
then
       	echo "no insert Argument"
elif [ $1 = get_pool ];then
	GET_URL="$GET_URL/df"
	POOLCNT=`{{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.pools[].name ' >/tmp/.pool && cat /tmp/.pool | wc -l`
	for (( i=1; i<=$POOLCNT; i++ ))
	do
		POOLNAME=${i}p
                if [ $i -eq 1 ];then
                        echo "{ \"data\":["
                        sed -n ${POOLNAME} /tmp/.pool | awk '{print "{ \"{{ '{#' }}POOL}\":" $1 "}"}'
                else
                        sed -n ${POOLNAME} /tmp/.pool | awk '{print ",{\"{{ '{#' }}POOL}\":" $1 "}"}'
                fi

                if [ $i -eq $POOLCNT ];then
                        echo "]}"
                fi
	done
rm -rf /tmp/.pool



elif [ $1 = get_osd ];then
        GET_URL="$GET_URL/osd/df"
        OSDCNT=`{{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.nodes[].name' >/tmp/.osd && cat /tmp/.osd | wc -l`
        for (( i=1; i<=${OSDCNT}; i++ ))
        do
                OSDNAME=${i}p
                if [ $i -eq 1 ];then
                        echo "{ \"data\":["
                        sed -n $OSDNAME /tmp/.osd | awk  '{print "{ \"{{ '{#' }}OSD}\":" $1 "}"}'
                else
                        sed -n $OSDNAME /tmp/.osd | awk '{print ",{\"{{ '{#' }}OSD}\":" $1 "}"}'
                fi
                if [ $i -eq $OSDCNT ];then
                        echo "]}"
                fi
        done
rm -rf /tmp/.osd

elif [ $1 = osd ];then
        GET_URL="$GET_URL/osd/df"

        if [ $2 = kb_avail ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} -r --arg OSDNAME $3 '.output.nodes[] | select(.name==$OSDNAME) | .kb_avail'
        elif [ $2 = kb_used ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} -r --arg OSDNAME $3 '.output.nodes[] | select(.name==$OSDNAME) | .kb_used'
        fi

elif [ $1 = stat ];then
	GET_URL="$GET_URL/osd/stat"

	if [ $2 = num_in_osds ];then
	        {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.num_in_osds'

	elif [ $2 = num_osds ];then
	        {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.num_osds'

	elif [ $2 = num_remapped_pgs ];then
	        {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.num_remapped_pgs'

	elif [ $2 = num_up_osds ];then
        	{{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.num_up_osds'
	fi

elif [ $1 = perf ];then
        GET_URL="$GET_URL/osd/perf"

	  if [ $2 = apply_latency_ms ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} .output.osd_perf_infos[].perf_stats.apply_latency_ms | awk '{s+=$1} END {print s}'

          elif [ $2 = commit_latency_ms ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} .output.osd_perf_infos[].perf_stats.commit_latency_ms | awk '{s+=$1} END {print s}'
	fi


elif [ $1 = df ];then
	GET_URL="$GET_URL/df"

	if [ $2 = pool_bytes_used ];then
	        {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} -r --arg POOLNAME $3 '.output.pools[] | select(.name==$POOLNAME) | .stats.bytes_used'

        elif [ $2 = pool_max_avail ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} -r --arg POOLNAME $3 '.output.pools[] | select(.name==$POOLNAME) | .stats.max_avail'

        elif [ $2 = pool_objects ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} -r --arg POOLNAME $3 '.output.pools[] | select(.name==$POOLNAME) | .stats.objects'

	elif [ $2 = total_used_bytes ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.stats.total_used_bytes'

	elif [ $2 = total_bytes ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.stats.total_bytes'

	elif [ $2 = total_avail_bytes ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.stats.total_avail_bytes'

	elif [ $2 = pool_cnt ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} ' .output.pools[].id' | wc -l

	fi

elif [ $1 = status ];then
        GET_URL="$GET_URL/status"

        if [ $2 = write_op_per_sec ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.pgmap.write_op_per_sec'
        elif [ $2 = read_bytes_sec ];then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.pgmap.read_bytes_sec'
        elif [ $2 = write_bytes_sec ] ;then
                {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.pgmap.write_bytes_sec'
        elif [ $2 = read_op_per_sec ] ;then
               {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.pgmap.read_op_per_sec'
        elif [ $2 = num_objects ] ;then
               {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.pgmap.num_objects'


        fi


elif [ $1 = health ];then
	GET_URL="$GET_URL/health"

	if [ $2 = status ];then
	        {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.status'
	fi


elif [ $1 = pg ];then
	GET_URL="$GET_URL/pg/stat"

	if [ $2 = state_name ];then
	        {{ CURL }} -H "$HEADER"  ${GET_URL} | ${JQ} '.output.num_pg_by_state[].name'
	fi



fi



